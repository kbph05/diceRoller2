Library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity adder is
port (add_clock, display_clock, pause, reset : in std_logic;
		add_amount_top : in std_logic_vector(6 downto 0);
		output : out std_logic_vector(2 downto 0)
		);
end adder;

architecture func of adder is

	component rand_num is 
		port (add_amount : in std_logic_vector(6 downto 0);
				pause_int, reset_int, clk: in std_logic;
				random : out std_logic_vector(2 downto 0)
				);
	end component;

	signal output_internal : std_logic_vector(2 downto 0);
	signal pause_trigger : std_logic;
	signal down_count : unsigned(4 downto 0) := "00000";
	signal down_count_logic : std_logic_vector(4 downto 0);

	begin

	addVar : add_var port map(
		add_amount => add_amount_top,
		clk => add_clock,
		random => output_internal,
		pause_int => pause_trigger,
		reset_int => reset
	);

	down_count_logic <= std_logic_vector(down_count);
	pause_trigger <= (down_count_logic(0) or down_count_logic(1) or down_count_logic(2) or down_count_logic(3) or down_count_logic(4));
	
	process is
	begin
		wait until display_clock = '1';
		output <= output_internal;
	end process;
	
	process is
	begin
		wait until (display_clock = '1' and pause_trigger = '1') or (pause = '1');
		down_count <= resize(down_count + 1, 5);
	end process;
	
end func;
