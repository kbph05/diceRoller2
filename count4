Library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Count4 is
	port (d : in std_logic_vector(3 downto 0);
			enable, load, clock : in std_logic;
			q : out std_logic_vector(3 downto 0)
			);	
end Count4;



architecture func of Count4 is
	
	signal xorGate, qIn : std_logic_vector(3 downto 0) := (others => '0');
	signal andGate : std_logic_vector(4 downto 0) := (others => '0');

	begin
	
	andGate(0) <= enable and qIn(0);
	xorGate(0) <= enable xor qIn(0);
	
	andGate(1) <= qIn(1) and andGate(0);
	xorGate(1) <= qIn(1) xor andGate(0);
	
	andGate(2) <= qIn(2) and andGate(1);
	xorGate(2) <= qIn(2) xor andGate(1);
		
	andGate(3) <= qIn(3) and andGate(2);
	xorGate(3) <= qIn(3) xor andGate(2);
	
process(clock)
		begin
		if rising_edge(clock) then
			if load = '1'
				then qIn <= d;
			else
				qIn <= xorGate;
			end if;
		end if;
end process;
	
	q <= qIn;

end func; 
